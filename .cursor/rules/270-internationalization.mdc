---
description: "Standards for implementing internationalization across the application"
globs: ["**/*.py", "**/*.js", "**/*.ts", "**/*.jsx", "**/*.tsx", "locales/**/*"]
alwaysApply: true
---

# Internationalization (i18n) Guidelines

## Overview
This document defines standards for implementing internationalization across the application to ensure consistent handling of translations, date/time formats, currencies, and locale-specific content.

## Translation Management

### Translation Files Structure
```
locales/
├── en/
│   ├── common.json
│   ├── errors.json
│   └── features/
│       ├── auth.json
│       └── dashboard.json
├── es/
└── fr/
```

### Translation Keys
- Use nested objects for better organization
- Follow the format: `{namespace}.{feature}.{component}.{key}`
- Example:
```json
{
  "auth": {
    "login": {
      "title": "Welcome back",
      "emailLabel": "Email address",
      "passwordLabel": "Password"
    }
  }
}
```

### Translation Process
1. Extract translatable strings using i18next-parser
2. Send to translation service via API
3. Review and QA translations
4. Deploy updated translations

### Best Practices
- No hardcoded strings in components
- Use ICU MessageFormat for plurals and variables
- Maintain context comments for translators
- Regular translation audits

## Date and Time Formatting

### Standards
- Use ISO 8601 for data storage: `YYYY-MM-DDTHH:mm:ss.sssZ`
- Display formats based on locale preferences
- Include timezone information where relevant

### Implementation
```python
from datetime import datetime
from babel.dates import format_datetime

def format_date(date: datetime, locale: str) -> str:
    return format_datetime(date, locale=locale, format="medium")
```

### Time Zones
- Store all timestamps in UTC
- Convert to user's timezone for display
- Include timezone selector in user preferences

## Currency Handling

### Standards
- Store amounts as integers (cents)
- Include currency code with all monetary values
- Support major currencies (USD, EUR, GBP, etc.)

### Implementation
```python
from decimal import Decimal
from babel.numbers import format_currency

def format_amount(amount: Decimal, currency: str, locale: str) -> str:
    return format_currency(amount, currency, locale=locale)
```

### Best Practices
- Use appropriate decimal places per currency
- Handle currency conversion rates
- Display local currency by default

## RTL Support

### Layout Requirements
- Use CSS logical properties
- Implement bidirectional text support
- Mirror layouts for RTL languages

### CSS Guidelines
```css
.container {
  margin-inline-start: 1rem;
  margin-inline-end: 1rem;
  text-align: start;
}
```

### Testing
- Test layouts in both LTR and RTL modes
- Verify text alignment and flow
- Check icon and image mirroring

## Locale Management

### Locale Detection
1. User preference (if logged in)
2. Accept-Language header
3. Browser settings
4. Default to English (en-US)

### Locale Data
- Include language name
- Number formatting rules
- Date/time formats
- Currency preferences

### Implementation
```python
def get_user_locale(request) -> str:
    if user := request.user:
        return user.preferred_locale
    return request.headers.get('Accept-Language', 'en-US').split(',')[0]
```

## Performance Considerations

### Loading Strategies
- Load translations asynchronously
- Bundle common translations
- Implement locale-specific code splitting

### Caching
- Cache translation files
- Store user locale preferences
- Cache formatted dates/numbers

## Monitoring and Metrics

### Key Metrics
- Missing translations
- Translation load times
- Locale distribution
- Error rates per locale

### Alerts
- Translation coverage < 95%
- Missing critical translations
- Formatting errors

## Related Rules
- [API Guidelines](150-api-guidelines.mdc)
- [Error Handling](160-error-handling.mdc)
- [Performance](170-performance.mdc) 

## 10. Related Rules
- [180-security.mdc](180-security.mdc): Security guidelines
- [170-performance.mdc](170-performance.mdc): Performance optimization
- [190-documentation.mdc](190-documentation.mdc): Documentation standards 