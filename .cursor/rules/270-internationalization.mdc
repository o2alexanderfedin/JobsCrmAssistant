---
description: 
globs: 
alwaysApply: false
---

# Internationalization Guidelines

This document defines the standards and requirements for implementing internationalization (i18n) across the Jobs CRM Assistant project.

## 1. Translation Management

### 1.1 Translation Files
- Use standard gettext `.po` files for Python backend
- Use `i18next` compatible JSON files for frontend
- Maintain separate translation files per language
- Follow ISO 639-1 language codes
- Include country variants when needed (e.g., `en-US`, `pt-BR`)

### 1.2 Translation Workflow
1. Extract translatable strings
2. Update translation files
3. Send to translators
4. Review translations
5. Compile and deploy

### 1.3 String Management
- Use translation keys in snake_case
- Group related translations by feature
- Provide context comments for translators
- Support pluralization rules
- Handle gender-specific translations

Example structure:
```
locales/
├── en/
│   ├── common.json
│   ├── jobs.json
│   └── profiles.json
└── es/
    ├── common.json
    ├── jobs.json
    └── profiles.json
```

## 2. Date and Time Formatting

### 2.1 Storage Standards
- Store all timestamps in UTC
- Use ISO 8601 format
- Include timezone information
- Handle daylight saving transitions
- Maintain precision requirements

### 2.2 Display Guidelines
- Format based on user's locale
- Support multiple date formats
- Handle timezone conversions
- Implement relative time formatting
- Consider cultural preferences

Example implementations:
```python
# Backend (Python)
from datetime import datetime
from babel.dates import format_datetime

def format_date(date: datetime, locale: str) -> str:
    return format_datetime(date, locale=locale, format="medium")

# Frontend (TypeScript)
import { formatDate } from '@angular/common';

formatDate(date, 'medium', locale);
```

## 3. Number and Currency Formatting

### 3.1 Number Standards
- Use locale-specific number formats
- Handle decimal separators
- Support grouping separators
- Format percentages appropriately
- Consider scientific notation

### 3.2 Currency Guidelines
- Store amounts in smallest unit (cents)
- Use ISO 4217 currency codes
- Handle exchange rates
- Format based on locale
- Support multiple currencies

Example:
```typescript
// Currency formatting
const formatter = new Intl.NumberFormat(locale, {
  style: 'currency',
  currency: 'USD'
});
```

## 4. RTL Support

### 4.1 Layout Requirements
- Use CSS logical properties
- Implement bidirectional text support
- Handle text alignment automatically
- Mirror icons and images when needed
- Support mixed LTR/RTL content

### 4.2 Implementation Guidelines
- Use `dir` attribute appropriately
- Implement CSS logical properties
- Handle bidirectional text
- Support dynamic switching
- Test with RTL languages

CSS example:
```css
/* Use logical properties */
.container {
  margin-inline-start: 1rem;
  padding-inline-end: 1rem;
  border-inline: 1px solid;
}
```

## 5. Locale Management

### 5.1 Locale Detection
1. User preference (if logged in)
2. URL parameter
3. Accept-Language header
4. Browser settings
5. Default locale (en-US)

### 5.2 Locale Switching
- Handle dynamic locale changes
- Update all formatted content
- Persist user preference
- Maintain URL parameters
- Handle fallbacks gracefully

Implementation example:
```typescript
class LocaleService {
  async switchLocale(locale: string): Promise<void> {
    // 1. Update user preference
    await this.userService.updateLocale(locale);
    
    // 2. Load locale data
    await this.i18n.loadTranslations(locale);
    
    // 3. Update application state
    this.store.dispatch(setLocale(locale));
    
    // 4. Refresh formatted content
    this.events.emit('localeChanged', locale);
  }
}
```

## 6. Content Management

### 6.1 Content Types
- Static text
- Dynamic content
- Images and media
- Documents and files
- Email templates

### 6.2 Content Guidelines
- Separate content from code
- Support variable interpolation
- Handle plural forms
- Manage formatting tokens
- Support rich text content

## 7. Testing Requirements

### 7.1 Test Coverage
- Unit tests for formatting
- Integration tests for locale switching
- Visual tests for RTL layouts
- Accessibility testing
- Performance testing

### 7.2 Test Cases
- Verify translations
- Check date/time formatting
- Validate number formatting
- Test RTL layouts
- Verify locale switching

## 8. Performance Considerations

### 8.1 Optimization Strategies
- Lazy load translations
- Cache formatted values
- Optimize bundle sizes
- Implement loading indicators
- Monitor performance metrics

### 8.2 Bundle Management
- Split translations by language
- Load translations on demand
- Cache translation files
- Optimize asset delivery
- Monitor bundle sizes

## 9. Security Guidelines

### 9.1 Input Validation
- Sanitize user input
- Validate locale codes
- Check translation keys
- Prevent injection attacks
- Handle malformed input

### 9.2 Output Encoding
- Encode translated text
- Handle HTML content safely
- Prevent XSS attacks
- Validate formatting tokens
- Escape special characters

## 10. Related Rules
- [180-security.mdc](180-security.mdc): Security guidelines
- [170-performance.mdc](170-performance.mdc): Performance optimization
- [190-documentation.mdc](190-documentation.mdc): Documentation standards 